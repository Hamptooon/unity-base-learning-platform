'use client'

import { SearchBar } from '@/shared/ui/search-bar'
import { Badge } from '@/shared/ui/badge'
import { useState, useMemo } from 'react'
import { ArticleList } from '@/entities/article/ui/user/article-list' // –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { useArticles } from '@/entities/article/model/use-articles'
import { useTags } from '@/entities/tag/model/use-tags'
import { useDebouncedCallback } from 'use-debounce'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/shared/ui/select'
import {
  Pagination,
  PaginationContent,
  PaginationItem
} from '@/shared/ui/pagination'
import { Button } from '@/shared/ui/button'

export default function ArticlesUser() {
  const [searchValue, setSearchValue] = useState('')
  const [selectedTags, setSelectedTags] = useState<string[]>([])
  const { tags: allTags } = useTags('article')
  const [statusFilter, setStatusFilter] = useState<'published'>('published')
  const [page, setPage] = useState(1)
  const [limit, setLimit] = useState(10)
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä –Ω–µ –Ω—É–∂–µ–Ω
  const requestParams = useMemo(
    () => ({
      page,
      limit,
      status: statusFilter == 'published' ? statusFilter : undefined,
      search: searchValue,
      tags: selectedTags.length > 0 ? selectedTags.join(',') : undefined,
      sortOrder
    }),
    [page, limit, searchValue, selectedTags, sortOrder]
  )

  const { articles, total, loading, error } = useArticles(requestParams)

  const handleTagToggle = (tag: string) => {
    setSelectedTags(prev =>
      prev.includes(tag) ? prev.filter(t => t !== tag) : [...prev, tag]
    )
    setPage(1)
  }

  const handleSearch = useDebouncedCallback((value: string) => {
    setPage(1)
    setSearchValue(value)
  }, 500)

  const handleResetFilters = () => {
    setPage(1)
    setSearchValue('')
    setSelectedTags([])
    setSortOrder('desc')
  }

  const totalPages = Math.ceil(total / limit)

  if (error) {
    return <div className="text-red-500 p-4">{error}</div>
  }

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <SearchBar
          value={searchValue}
          onChange={e => setSearchValue(e.target.value)}
          onSearch={handleSearch}
          placeholder="–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π..."
        />
      </div>

      <div className="mb-6 flex flex-wrap gap-2">
        {allTags.map(tag => (
          <Badge
            key={tag.id}
            variant={selectedTags.includes(tag.name) ? 'default' : 'outline'}
            className="cursor-pointer"
            onClick={() => handleTagToggle(tag.name)}
          >
            {tag.name}
          </Badge>
        ))}
      </div>

      <div className="mb-6 flex flex-wrap gap-4 items-center">
        <Select
          value={sortOrder}
          onValueChange={(value: 'asc' | 'desc') => {
            setSortOrder(value)
            setPage(1)
          }}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="desc">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</SelectItem>
            <SelectItem value="asc">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</SelectItem>
          </SelectContent>
        </Select>

        <Button onClick={handleResetFilters} className="cursor-pointer">
          –°–±—Ä–æ—Å–∏—Ç—å
        </Button>
      </div>

      <ArticleList articles={articles} loading={loading} error={error} />
      {articles.length === 0 && (
        <div className="flex flex-col items-center justify-center text-center h-[60vh] gap-2">
          <h1 className="text-3xl font-bold">üòï –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h1>
          <p className="text-muted-foreground text-lg">
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
          </p>
        </div>
      )}
      {articles.length > 0 && (
        <div className="mt-6 flex justify-between items-center">
          <div className="text-sm text-muted-foreground">
            –ü–æ–∫–∞–∑–∞–Ω–æ {articles.length} –∏–∑ {total} —Å—Ç–∞—Ç–µ–π
          </div>

          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <Button
                  variant="outline"
                  disabled={page === 1}
                  onClick={() => setPage(p => Math.max(1, p - 1))}
                >
                  –ù–∞–∑–∞–¥
                </Button>
              </PaginationItem>

              <PaginationItem>
                <div className="px-4">
                  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {totalPages}
                </div>
              </PaginationItem>

              <PaginationItem>
                <Button
                  variant="outline"
                  disabled={page >= totalPages}
                  onClick={() => setPage(p => Math.min(totalPages, p + 1))}
                >
                  –í–ø–µ—Ä–µ–¥
                </Button>
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  )
}
